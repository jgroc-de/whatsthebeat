<!doctype html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>What's the B**t? music tools for wind instruments</title>
    <meta
            name="description"
            content="Here is some free music tools for wind instruments as a tuner, a metronome, a beat taker and more. Enjoy, download if you want and share!"
    />
    <link rel="icon" href="/icons/favicon.ico" type="image/x-icon" />
    <link rel="manifest" href="/manifest.json" />
    <meta name="apple-mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-status-bar-style" content="black" />
    <meta name="apple-mobile-web-app-title" content="What's the B**t?" />
    <link rel="apple-touch-icon" href="/icons/icon-152x152.png" />
    <meta name="description" content="Take the beat of any music" />
    <meta name="theme-color" content="#55b9f3" />
    <link
            rel="stylesheet"
            href="https://fonts.googleapis.com/icon?family=Material+Icons&display=swap"
    />
    <meta property="og:title" content="What's the B**t?" />
    <meta property="og:type" content="website" />
    <link rel="stylesheet" href="./build.css" />
</head>

<body class="flex flex-col-reverse bg-blue text-[3vh] text-dark items-center">
<nav class="h-[60px] w-full pt-[8px] bg-orange border-yellow border-t-[5px] flex justify-around items-center fixed bottom-0 text-[12px]">
    <a class="w-0 grow flex flex-col justify-center items-center hover:text-lightGreen  {% if current_page == 'tuner' %}text-lightGreen{% endif %}"
       href="/tuner.html">
        <i class="material-icons" title="tuner">equalizer</i>
        tuner
    </a>
    <a class="w-0 grow flex flex-col justify-center items-center hover:text-lightGreen {% if current_page == 'tap' %}text-lightGreen{% endif %}"
       href="/tap-the-beat.html">
        <i class="material-icons" title="tap the beat">touch_app</i>
        Tap the beat
    </a>
    <a class="w-0 grow flex flex-col justify-center items-center hover:text-lightGreen" href="/metronome.html">
        <i class="material-icons" title="metronome">notifications</i>
        Metronome
    </a>
    <a class="w-0 grow flex flex-col justify-center items-center hover:text-lightGreen" href="/follow_my_path.html">
        <i class="material-icons" title="follow my path game">pattern</i>
        Pattern
    </a>
    <a class="w-0 grow flex flex-col justify-center items-center hover:text-lightGreen {% if current_page == 'settings' %}text-lightGreen{% endif %}"
       href="/settings.html">
        <i class="material-icons" title="settings">tune</i>
        Settings
    </a>
    <a class="w-0 grow flex flex-col justify-center items-center hover:text-lightGreen {% if current_page == 'about' %}text-lightGreen{% endif %}"
       href="/">
        <i class="material-icons" title="about this app">help_outline</i>
        about
    </a>
</nav>

<button class="fixed top-[20px] right-[20px] border-[1px] rounded-full shadow-lg bg-gradient-to-br from-[#5bc6ff] to-[#4da7db] p-[4px]"
        id="help"><i class="material-icons gg-help">help_outline</i></button>
{% block main %}{% endblock %}

{% block script %}{% endblock %}

<script>

	onLinkNavigate(async ({ toPath }) => {
		const content = await getPageContent(toPath)

		startViewTransitionHelper(() => {
			// This is a pretty heavy-handed way to update page content.
			// In production, you'd likely be modifying DOM elements directly,
			// or using a framework.
			// innerHTML is used here just to keep the DOM update super simple.
			document.body.innerHTML = content
		})
	})


	// A little helper function like this is really handy
	// to handle progressive enhancement.
	function startViewTransitionHelper(callback) {
		if (!document.startViewTransition) {
			callback()
			return
		}

		document.startViewTransition(callback)
	}

	async function getPageContent(url) {
		// This is a really scrappy way to do this.
		// Don't do this in production!
		const response = await fetch(url)
		const text = await response.text()
		// Particularly as it uses regexp
		return /<body[^>]*>([\w\W]*)<\/body>/.exec(text)[1]
	}

	// Intercept navigations
	// https://developer.chrome.com/docs/web-platform/navigation-api/
	// This is a naive usage of the navigation API, to keep things simple.
	async function onLinkNavigate(callback) {
		navigation.addEventListener('navigate', (event) => {
			const toUrl = new URL(event.destination.url)

			if (location.origin !== toUrl.origin) return

			const fromPath = location.pathname
			const isBack = false

			event.intercept({
				async handler() {
					if (event.info === 'ignore') return

					await callback({
						toPath: toUrl.pathname,
						fromPath,
						isBack,
					})
				},
			})
		})
	}

	// This helper function returns a View-Transition-like object, even for browsers that don't support view transitions.
	// It won't do the transition in unsupported browsers, it'll act as if the transition is skipped.
	// It also makes it easier to add class names to the document element.
	function transitionHelper({
        skipTransition = false,
        classNames = '',
        updateDOM,
    }) {
		if (skipTransition || !document.startViewTransition) {
			const updateCallbackDone = Promise.resolve(updateDOM()).then(() => undefined)

			return {
				ready: Promise.reject(Error('View transitions unsupported')),
				domUpdated: updateCallbackDone,
				updateCallbackDone,
				finished: updateCallbackDone,
			}
		}

		const classNamesArray = classNames.split(/\s+/g).filter(Boolean)

		document.documentElement.classList.add(...classNamesArray)

		const transition = document.startViewTransition(updateDOM)

		transition.finished.finally(() =>
			document.documentElement.classList.remove(...classNamesArray),
		)

		return transition
	}


</script>

<template route id="metronome">
    <div>
        <form class="gg-4-rows">
            <note-select></note-select>
            <octave-input></octave-input>
            <pitch-input></pitch-input>
            <tempo-input></tempo-input>
        </form>
    </div>
    <div class="gg-2-cols">
        <div id="actions" class="gg-3-rows">
            <button-random></button-random>
            <button-mute></button-mute>
            <button-reset></button-reset>
        </div>
        <button-start></button-start>
    </div>
    <div hidden>
        <div id="helper">
            <p>This is a metronome. Change the input to modify what you want.</p>
        </div>
        <span id="wtb-title">Metronome - What's the B**t?</span>
        <span id="wtb-description"
        >A simple metronome with the possibility to set the note frequency
					precisely</span
        >
    </div>
</template>

<template route id="tuner" home>
    <div>
        <form class="gg-4-rows">
            <note-select></note-select>
            <octave-input></octave-input>
            <pitch-input></pitch-input>
            <wave-select></wave-select>
        </form>
    </div>
    <div class="gg-2-cols">
        <div id="actions" class="gg-3-rows">
            <button-random></button-random>
            <button-mute></button-mute>
            <button-reset></button-reset>
        </div>
        <button-start></button-start>
    </div>
    <div hidden>
        <div id="helper">
            <p>
                This is a "tuner" helper. It plays a note and it's up to you to feel
                if you are in tune or not.
            </p>
        </div>
        <span id="wtb-title">Tuner - What's the B**t?</span>
        <span id="wtb-description"
        >This is a "tuner" helper. It plays a note and it's up to you to feel
					if you are in tune or not! Here is some free music tools for wind
					instruments as a tuner, a metronome, a beat taker and more. Enjoy,
					download if you want and share</span
        >
    </div>
</template>

<template route id="follow_my_path">
    <div>
        <form class="gg-2-rows">
            <repeat-input></repeat-input>
            <tempo-input></tempo-input>
        </form>
    </div>
    <div class="gg-2-cols">
        <div id="actions" class="gg-2-rows">
            <button-mute></button-mute>
            <button-reset></button-reset>
        </div>
        <button-start></button-start>
    </div>
    <div hidden>
        <div id="helper">
            <p>
                This is a little hear game. Listen to the path and try to reproduce
                it! You can modify the scales and octave in the config tab.
            </p>
        </div>
        <span id="wtb-title">Follow My Path - What's the B**t?</span>
        <span id="wtb-description"
        >This is a little hear game. Listen to the path and try to reproduce
					it!</span
        >
    </div>
</template>

<template route id="config">
    <div>
        <form class="gg-4-rows">
            <octave-input></octave-input>
            <pitch-input></pitch-input>
            <tempo-input></tempo-input>
            <repeat-input></repeat-input>
        </form>
    </div>
    <div>
        <form class="gg-4-rows">
            <note-select></note-select>
            <gamme-select></gamme-select>
            <mode-select></mode-select>
            <wave-select></wave-select>
        </form>
    </div>
    <div hidden>
        <div id="helper">
            <p>
                This is the config window. Everything that you will set here will
                impact all other tab.
            </p>
        </div>
        <span id="wtb-title">Config - What's the B**t?</span>
        <span id="wtb-description">Configure your app!</span>
    </div>
</template>

<template id="noteSelect">
    <label for="note"><span>Note: </span><span></span></label>
    <div class="gg-3-cols">
        <div class="gg-range-div">-</div>
        <select name="note" id="note">
            <option>A</option>
            <option>A#</option>
            <option>B</option>
            <option>C</option>
            <option>C#</option>
            <option>D</option>
            <option>D#</option>
            <option>E</option>
            <option>F</option>
            <option>F#</option>
            <option>G</option>
            <option>G#</option>
        </select>
        <div class="gg-range-div">+</div>
    </div>
</template>

<template id="gammeSelect">
    <label for="gamme"><span>Gamme: </span><span></span></label>
    <div class="gg-3-cols">
        <div class="gg-range-div">-</div>
        <select name="gamme" id="gamme">
            <option>A</option>
            <option>A#</option>
            <option>B</option>
            <option>C</option>
            <option>C#</option>
            <option>D</option>
            <option>D#</option>
            <option>E</option>
            <option>F</option>
            <option>F#</option>
            <option>G</option>
            <option>G#</option>
        </select>
        <div class="gg-range-div">+</div>
    </div>
</template>

<template id="modeSelect">
    <label for="mode"><span>Mode: </span><span></span></label>
    <div class="gg-3-cols">
        <div class="gg-range-div">-</div>
        <select name="mode" id="mode">
            <option>M</option>
            <option>m</option>
            <option>par ton</option>
            <option>chromatique</option>
        </select>
        <div class="gg-range-div">+</div>
    </div>
</template>

<template id="waveSelect">
    <label for="wave"><span>wave: </span><span></span></label>
    <div class="gg-3-cols">
        <div class="gg-range-div">-</div>
        <select name="waveForm" id="waveForm">
            <option>sine</option>
            <option>square</option>
            <option>sawtooth</option>
            <option>triangle</option>
        </select>
        <div class="gg-range-div">+</div>
    </div>
</template>

<template id="octaveInput">
    <label for="octave"><span>Octave: </span><span></span></label>
    <div class="gg-3-cols">
        <div class="gg-range-div">-</div>
        <input
                type="range"
                name="octave"
                id="octave"
                min="0"
                max="7"
                value="3"
        />
        <div class="gg-range-div">+</div>
    </div>
</template>

<template id="repeatInput">
    <label for="repeat"><span>Repeat: </span><span>times</span></label>
    <div class="gg-3-cols">
        <div class="gg-range-div">-</div>
        <input
                type="range"
                name="repeat"
                id="repeat"
                min="0"
                max="12"
                value="1"
        />
        <div class="gg-range-div">+</div>
    </div>
</template>

<template id="pitchInput">
    <label for="pitch"
    ><span>Pitch: </span><span></span><span> Hz</span></label
    >
    <div class="gg-3-cols">
        <div class="gg-range-div">-</div>
        <input
                type="range"
                name="pitch"
                id="pitch"
                min="350"
                max="500"
                value="442"
        />
        <div class="gg-range-div">+</div>
    </div>
</template>

<template id="tempoInput">
    <label for="tempo"
    ><span>Tempo: </span><span></span><span> (BPM)</span></label
    >
    <div class="gg-3-cols">
        <div class="gg-range-div">-</div>
        <input
                type="range"
                name="tempo"
                id="tempo"
                min="1"
                max="240"
                value="60"
        />
        <div class="gg-range-div">+</div>
    </div>
</template>

<template id="randomButton">
    <button id="random" class="gg-button-m">
        <i class="material-icons gg-font-l" title="random">shuffle</i>
    </button>
</template>

<template id="muteButton">
    <button id="mute" class="gg-button-m">
        <i class="material-icons gg-font-l" title="mute">volume_off</i>
    </button>
</template>

<script>
	if ('serviceWorker' in navigator) {
		window.addEventListener('load', () => {
			navigator.serviceWorker
				.register('/service-worker.js')
				.then((worker) => {
					//console.log('Service worker registered.', worker)
					navigator.serviceWorker.addEventListener(
						'message',
						function(event) {
							document.getElementById('version').textContent = event.data
						},
					)
					if (navigator.serviceWorker.controller) {
						navigator.serviceWorker.controller.postMessage('set_version')
					}
				})
		})
	}

	class NoteSelect extends HTMLElement {
		constructor() {
			super()
			this.innerHTML = document.getElementById('noteSelect').innerHTML
		}
	}

	class GammeSelect extends HTMLElement {
		constructor() {
			super()
			this.innerHTML = document.getElementById('gammeSelect').innerHTML
		}
	}

	class ModeSelect extends HTMLElement {
		constructor() {
			super()
			this.innerHTML = document.getElementById('modeSelect').innerHTML
		}
	}

	class WaveSelect extends HTMLElement {
		constructor() {
			super()
			this.innerHTML = document.getElementById('waveSelect').innerHTML
		}
	}

	class OctaveInput extends HTMLElement {
		constructor() {
			super()
			this.innerHTML = document.getElementById('octaveInput').innerHTML
		}
	}

	class RepeatInput extends HTMLElement {
		constructor() {
			super()
			this.innerHTML = document.getElementById('repeatInput').innerHTML
		}
	}

	class PitchInput extends HTMLElement {
		constructor() {
			super()
			this.innerHTML = document.getElementById('pitchInput').innerHTML
		}
	}

	class TempoInput extends HTMLElement {
		constructor() {
			super()
			this.innerHTML = document.getElementById('tempoInput').innerHTML
		}
	}

	class StartButton extends HTMLElement {
		constructor() {
			super()
			this.innerHTML = document.getElementById('startButton').innerHTML
		}
	}

	class RandomButton extends HTMLElement {
		constructor() {
			super()
			this.innerHTML = document.getElementById('randomButton').innerHTML
		}
	}

	class ResetButton extends HTMLElement {
		constructor() {
			super()
			this.innerHTML = document.getElementById('resetButton').innerHTML
		}
	}

	class MuteButton extends HTMLElement {
		constructor() {
			super()
			this.innerHTML = document.getElementById('muteButton').innerHTML
		}
	}

	window.customElements.define('note-select', NoteSelect)
	window.customElements.define('gamme-select', GammeSelect)
	window.customElements.define('mode-select', ModeSelect)
	window.customElements.define('wave-select', WaveSelect)
	window.customElements.define('octave-input', OctaveInput)
	window.customElements.define('repeat-input', RepeatInput)
	window.customElements.define('pitch-input', PitchInput)
	window.customElements.define('tempo-input', TempoInput)
	window.customElements.define('button-start', StartButton)
	window.customElements.define('button-random', RandomButton)
	window.customElements.define('button-reset', ResetButton)
	window.customElements.define('button-mute', MuteButton)
</script>
</body>
</html>
